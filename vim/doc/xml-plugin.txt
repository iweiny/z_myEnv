XML Edit                                        *xml-plugin.txt* *xmledit.vim*

A filetype plugin to help edit XML and SGML documents.

This script provides some convenience when editing XML (and some SGML including
HTML) formated documents. It allows you to jump to the beginning or end of the
tag block your cursor is in. '%' will jump between '<' and '>' within the tag
your cursor is in. When in insert mode and you finish a tag (pressing '>') the
tag will be completed. If you press '>' twice it will complete the tag and
place the cursor in the middle of the tags on it's own line (helps with nested
tags).

Usage: Place this file into your ftplugin directory. To add html support
Sym-link or copy this file to html.vim in your ftplugin directory. To activte
the script place 'filetype plugin on' in your |.vimrc| file. See |ftplugins|
for more information on this topic.

If the file edited is of type 'html' and 'xml_use_html' is  defined then the
following tags will not auto complete:
<img>, <input>, <param>, <frame>, <br>, <hr>, <meta>, <link>, <base>, <area>

If the file edited is of type 'html' and 'xml_use_xhtml' is defined the above
tags will autocomplete the xml closing staying xhtml compatable.
ex. <hr> becomes <br /> (see |xml-plugin-settings|)

Note: If you used the VIM 5.x version of this file (xmledit.vim) you'll need to
comment out the section where you called it. It is no longer used in the
VIM 6.x version. 

Maintainer: Devin Weaver <vim@tritarget.com>
Kudos to "Brad Phelan" for completing tag matching and visual tag completion.
Kudos to "Ma, Xiangjiang" for pointing out VIM 6.0 map <buffer> feature.

Known Bugs:
- This script will modify registers ". and "x; register "" will be restored.
- < & > marks inside of a CDATA section are interpreted as actual XML tags
  even if unmatched.
- Although the script can handle leading spaces such as < tag></ tag> it is
  illegal XML syntax and considered very bad form.
- Placing a literal `>' in an attribute value will auto complete dispite that
  the start tag isn't finished. This is poor XML anyway you should use
  &gt; instead.
- The matching algorithm can handle illegal tag characters where as the tag
  completion algorithm can not.

Mappings:
<Leader>x
	Visual - Place a custom XML tag to suround the selected text.

<Leader>.   or   <Leader>>
	Insert - Place a literal '>' without parsing tag.

<Leader>5   or   <Leader>%
	Normal - Jump to the begining or end tag.

OPTIONS							*xml-plugin-settings*

(All options must be placed in your |.vimrc| prior to the |ftplugin| command.)

xml_tag_completion_map
	Use this setting to change the default mapping to auto complete a tag.
	By default typing a literal `>' will cause the tag your editing to auto
	complete; pressing twice will auto nest the tag. By using this setting
	the `>' will be a literal `>' and you must use the new mapping to
	perform auto completion and auto nesting. For example if you wanted
	Control-L to perform auto completion inmstead of typing a `>' place the
	following into your .vimrc:
	    let xml_tag_completion_map = "<C-l>"

xml_no_auto_nesting
	This turns off the auto nesting feature. After a completion is made and
	another `>' is typed xml-edit automatically will break the tag accross
	multiple lines and indent the curser to make creating nested tqags
	easier. This feature turns it off. Enter the following in your .vimrc:
	    let xml_no_auto_nesting = 1

xml_use_xhtml
	When editing HTML this will auto close the short tags to make
	valid XML like <hr /> and <br />. Enter the following in your vimrc to
	turn this option on:
	    let xml_use_xhtml = 1

xml_no_html
	This turns of the support for HTML specific tags. Place this in your
	.vimrc:
	    let xml_no_html = 1
